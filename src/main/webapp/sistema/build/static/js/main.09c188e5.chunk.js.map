{"version":3,"sources":["Task.js","TodoList.js","registerServiceWorker.js","index.js"],"names":["Task","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","makeTasks","bind","assertThisInitialized","key","delete","task","_this2","react_default","a","createElement","onClick","text","listTasks","elementos","map","Component","TodoList","state","items","addItem","filterIts","filter","it","setState","e","_inputElement","value","Date","now","ps","concat","console","log","preventDefault","onSubmit","placeholder","ref","entrada","type","style","display","src_Task","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","saida","document","getElementById","ReactDOM","render","src_TodoList_0","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.09c188e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Task extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.makeTasks = this.makeTasks.bind(this);\r\n    }\r\n\r\n    delete(key){\r\n        this.props.delete(key);\r\n    }\r\n\r\n    makeTasks(task){\r\n        return <li onClick={() =>this.delete(task.key)} key={task.key}>{task.text}</li>\r\n    }\r\n\r\n    render(){\r\n        var tasks = this.props.elementos;\r\n        var listTasks = tasks.map(this.makeTasks);\r\n\r\n        return (\r\n            <ul>\r\n                {listTasks}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport Task from './Task';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            items: []\r\n        };\r\n\r\n        this.addItem = this.addItem.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n    }\r\n\r\n    delete(key){\r\n        var filterIts =this.state.items.filter(\r\n            it => {\r\n                return (it.key !== key) //filtra elementos diferentes do elemento a deletar\r\n            }\r\n        );\r\n\r\n        this.setState({\r\n            items: filterIts\r\n        });\r\n    }\r\n\r\n    addItem(e){\r\n        if(this._inputElement.value !== \"\"){\r\n            var it = {\r\n                text: this._inputElement.value,\r\n                key: Date.now()\r\n            };\r\n            //this.state.items.push(it);\r\n            this.setState(ps => {\r\n                return {\r\n                    items: ps.items.concat(it)\r\n                };\r\n            });\r\n        }\r\n\r\n        console.log('TESTE', this.state.items);\r\n\r\n        this._inputElement.value = \"\";\r\n        e.preventDefault();        \r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div>\r\n                    <div>\r\n                        <form onSubmit={this.addItem}>\r\n                            <input placeholder=\"O que precisa ser feito?\" ref={entrada => this._inputElement = entrada }></input>\r\n                            <button type=\"submit\" style={{display: 'none'}}></button>                           \r\n                        </form>\r\n                    </div>\r\n                    <Task elementos={this.state.items}\r\n                          delete={this.delete}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\nexport default TodoList;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport TodoList from './TodoList';\nimport registerServiceWorker from './registerServiceWorker';\n\n//document.getElementById('root')\n//var saida = document.querySelector('#listbody');\n//ReactDOM.render(React.createElement(TodoList), document.getElementById('list-body'));\nvar saida = document.getElementById('list-body');\n\nReactDOM.render(<TodoList/>, saida);\n//ReactDOM.render(<App/>, saida);\nregisterServiceWorker();\n"],"sourceRoot":""}